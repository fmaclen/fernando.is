import { browser } from '$app/environment';
import { writable } from 'svelte/store';

const GITHUB_API_BASE_URL = 'https://api.github.com/repos';
const LOCAL_STORAGE_PROJECTS_KEY = 'projects';
const LOCAL_STORAGE_LAST_CHECK_KEY = 'lastCheck';
const ONE_HOUR_IN_MS = 60 * 60 * 1000; // Number of milliseconds in an hour

export interface Project {
	title: string;
	description: string;
	url: string;
	repo: string;
	updatedAt?: string;
	theme?: string;
}

let projects: Project[] = [
	{
		title: 'fernando.is',
		description: 'This is so meta',
		url: 'https://fernando.is',
		repo: 'fmaclen/fernando.is',
		theme: 'fernando-is'
	},
	{
		title: 'Canutin',
		description: 'A personal finance desktop application',
		url: 'https://canutin.com',
		repo: 'fmaclen/canutin-desktop',
		theme: 'canutin'
	},
	{
		title: 'svelte-currency-input',
		description: 'A form input that converts numbers to localized currency formats as you type',
		url: 'https://npmjs.com/package/@canutin/svelte-currency-input',
		repo: 'fmaclen/svelte-currency-input',
		theme: 'svelte-currency-input'
	},
	{
		title: 'Julia Sanfrancisco',
		description: 'A web-based detective game largely generated by AI',
		url: 'https://julia.strictoaster.com',
		repo: 'fmaclen/julia-sanfrancisco',
		theme: 'julia-sanfrancisco'
	},
	{
		title: 'auto-garden',
		description: 'Computers that garden for you',
		url: 'https://github.com/fmaclen/auto-garden',
		repo: 'fmaclen/auto-garden',
		theme: 'auto-garden'
	},
	{
		title: 'Promptspree',
		description: 'Chat-based AI article generator and editor',
		url: 'https://promptspree.com',
		repo: 'fmaclen/promptspree',
		theme: 'promptspree'
	},
	{
		title: 'rule-of-three',
		description: 'A tiny direct proportion calculator for macOS',
		url: 'https://github.com/fmaclen/rule-of-three',
		repo: 'fmaclen/rule-of-three',
		theme: 'rule-of-three'
	}
];

const localStorageLastChecked = browser
	? window.localStorage.getItem(LOCAL_STORAGE_LAST_CHECK_KEY)
	: null;

// Being nice to the Github API by caching the results for an hour
const shouldGetLastProjectUpdate =
	!localStorageLastChecked ||
	new Date().getTime() - new Date(localStorageLastChecked).getTime() > ONE_HOUR_IN_MS;

const localStorageProjects = browser ? window.localStorage.getItem(LOCAL_STORAGE_PROJECTS_KEY) : [];
const projectsStore = writable<Project[]>([]);

async function getLastProjectUpdate(project: Project) {
	const response = await fetch(`${GITHUB_API_BASE_URL}/${project.repo}`);
	const data = await response.json();
	project.updatedAt = data.pushed_at ? data.pushed_at : undefined;
	projectsStore.set(projects);
}

if (shouldGetLastProjectUpdate) {
	for (const project of projects) getLastProjectUpdate(project);
} else {
	if (typeof localStorageProjects === 'string') {
		projects = JSON.parse(localStorageProjects) as Project[];
		projectsStore.set(projects);
	}
}

// Update the browser's local storage when the store changes
projectsStore.subscribe((projects) => {
	projects.sort((a, b) => {
		if (!a.updatedAt) return 1;
		if (!b.updatedAt) return -1;
		return new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime();
	});

	if (!browser) return;
	if (shouldGetLastProjectUpdate) {
		window.localStorage.setItem(LOCAL_STORAGE_PROJECTS_KEY, JSON.stringify(projects));
		window.localStorage.setItem(LOCAL_STORAGE_LAST_CHECK_KEY, new Date().toISOString());
	}
});

export default projectsStore;
